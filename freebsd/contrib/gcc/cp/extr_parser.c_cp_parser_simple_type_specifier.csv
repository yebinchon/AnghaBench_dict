CP_PARSER_FLAGS_NO_USER_DEFINED_TYPES,VAR_0
CP_PARSER_FLAGS_OPTIONAL,VAR_1
DECL_NAME,FUNC_0
IDENTIFIER_NODE,VAR_2
NULL_TREE,VAR_3
TREE_CODE,FUNC_1
TREE_TYPE,FUNC_2
TYPE_DECL,VAR_4
TYPE_NAME,FUNC_3
TYPE_P,FUNC_4
boolean_type_node,VAR_5
c_dialect_objc,FUNC_5
char_type_node,VAR_6
cp_lexer_consume_token,FUNC_6
cp_lexer_peek_token,FUNC_7
cp_parser_check_for_invalid_template_id,FUNC_8
cp_parser_error,FUNC_9
cp_parser_global_scope_opt,FUNC_10
cp_parser_nested_name_specifier_opt,FUNC_11
cp_parser_objc_protocol_refs_opt,FUNC_12
cp_parser_optional_template_keyword,FUNC_13
cp_parser_parse_definitely,FUNC_14
cp_parser_parse_tentatively,FUNC_15
cp_parser_set_decl_spec_type,FUNC_16
cp_parser_sizeof_operand,FUNC_17
cp_parser_template_id,FUNC_18
cp_parser_type_name,FUNC_19
double_type_node,VAR_7
ds_long,VAR_8
ds_short,VAR_9
ds_signed,VAR_10
ds_unsigned,VAR_11
error_mark_node,VAR_12
finish_typeof,FUNC_20
float_type_node,VAR_13
integer_type_node,VAR_14
long_integer_type_node,VAR_15
maybe_note_name_used_in_class,FUNC_21
objc_get_protocol_qualified_type,FUNC_22
objc_is_class_name,FUNC_23
objc_is_id,FUNC_24
short_integer_type_node,VAR_16
unsigned_type_node,VAR_17
void_type_node,VAR_18
wchar_type_node,VAR_19
cp_parser_simple_type_specifier,FUNC_25
parser,VAR_20
decl_specs,VAR_21
flags,VAR_22
type,VAR_23
token,VAR_24
id,VAR_25
qualified_p,VAR_26
global_p,VAR_27
protos,VAR_28
qual_type,VAR_29
